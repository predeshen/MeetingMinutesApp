// <auto-generated />
using System;
using MeetingMinutesApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingMinutesApp.Migrations
{
    [DbContext(typeof(MeetingMinutesAppContext))]
    [Migration("20240824105202_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingTypeId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("MeetingId");

                    b.HasIndex("MeetingTypeId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.MeetingItem", b =>
                {
                    b.Property<int>("MeetingItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.HasKey("MeetingItemId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingItems");
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.MeetingItemStatus", b =>
                {
                    b.Property<int>("MeetingItemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingItemStatusId"));

                    b.Property<int>("MeetingItemId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingItemStatusId");

                    b.HasIndex("MeetingItemId");

                    b.ToTable("MeetingItemStatuses");
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.MeetingType", b =>
                {
                    b.Property<int>("MeetingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingTypeId");

                    b.ToTable("MeetingTypes");

                    b.HasData(
                        new
                        {
                            MeetingTypeId = 1,
                            Name = "MANCO"
                        },
                        new
                        {
                            MeetingTypeId = 2,
                            Name = "Finance"
                        },
                        new
                        {
                            MeetingTypeId = 3,
                            Name = "Project Team Leaders"
                        });
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Name = "John Doe"
                        },
                        new
                        {
                            PersonId = 2,
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.Meeting", b =>
                {
                    b.HasOne("MeetingMinutesApp.Core.Entities.MeetingType", "MeetingType")
                        .WithMany()
                        .HasForeignKey("MeetingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingType");
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.MeetingItem", b =>
                {
                    b.HasOne("MeetingMinutesApp.Core.Entities.Meeting", "Meeting")
                        .WithMany("MeetingItems")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.MeetingItemStatus", b =>
                {
                    b.HasOne("MeetingMinutesApp.Core.Entities.MeetingItem", "MeetingItem")
                        .WithMany("MeetingItemStatuses")
                        .HasForeignKey("MeetingItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingItem");
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingItems");
                });

            modelBuilder.Entity("MeetingMinutesApp.Core.Entities.MeetingItem", b =>
                {
                    b.Navigation("MeetingItemStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
